#!/usr/bin/perl -CSDAL
use warnings;
use strict;
use AnyEvent::HTTP;
use Asterisk::AMI;
use Config::Simple;
use DDP;
use FindBin;
use Getopt::Long;
use Log::Any::Adapter;
use Log::Any qw($log);
use POSIX;
use WWW::Form::UrlEncoded;

my $opt;
my $cfg;
my $astman;
my @zammad_post_queue;
my $zammad_lock = 0;
my $zammad_queue_watcher;

sub help
{
  print "Usage: $0 [--asterisk ASTERISK] [--zammad ZAMMAD]\n";
  print "\n";
  print "This daemon connects to an Asterisk instance via AMI to monitor ";
  print "queue events;\n";
  print "relevant events will be pushed via HTTPS to a Zammad instance.\n";
  print "\n";
  print "Configuration on how to access these instances is configured in ";
  print "config.cfg; by\n";
  print "default the [zammad] section configures how to access the Zammad ";
  print "instance, and\n";
  print "the [asterisk] section configures how to access the Asterisk ";
  print "instance.\n";
  print "If you want to bridge multiple instances (e.g. one Asterisk should ";
  print "push events\n";
  print "to both production and testing instances of Zammad), configure ";
  print "multiple\n";
  print "sections in config.cfg and then start two instances of this daemon:\n";
  print "\n";
  print "  $0 --asterisk asterisk --zammad zammad-prod\n";
  print "  $0 --asterisk asterisk --zammad zammad-test\n";
  print "\n";
  print "";
  print "Options\n";
  print "  --asterisk ASTERISK  Asterisk configuration section\n";
  print "  --zammad   ZAMMAD    Zammad configuration section\n";
  print "  --help               This help\n";
  exit;
}

sub asterisk_connect
{
  $log->info("connecting to Asterisk...");

  $astman = Asterisk::AMI->new(
      PeerAddr => $cfg->param("$opt->{asterisk}.host"),
      PeerPort => $cfg->param("$opt->{asterisk}.port"),
      Username => $cfg->param("$opt->{asterisk}.user"),
      Secret   => $cfg->param("$opt->{asterisk}.secret"),
      Events   => "on",
      Handlers => { default => \&cb_default },
      Blocking => 0,
      on_connect => \&on_connect,
      on_error => \&on_error,
      on_disconnect => \&on_disconnect,
    );
}

sub dequeue_zammad
{
  return if scalar @zammad_post_queue == 0;
  return if $zammad_lock;

  my $body = shift @zammad_post_queue;
  $log->infof("posting to Zammad: %s", $body);

  $zammad_lock = 1;
  http_post $cfg->param("$opt->{zammad}.url"), $body,
      sub {
        $zammad_lock = 0;
        my ($data, $headers) = @_;
        if ($data ne "{}")
        {
          p $data;
          p $headers;
        }
      };
}

sub post_zammad
{
  my $post = shift;

  my $body = WWW::Form::UrlEncoded::build_urlencoded($post);

  $log->infof("pushing to Zammad post queue: %s", $body);
  push @zammad_post_queue, $body;

  if (!$zammad_queue_watcher)
  {
    if (scalar @zammad_post_queue > 1)
    {
      $log->debug("starting queue runner");
    }
  }
  $zammad_queue_watcher ||= AnyEvent->idle(cb => sub {
      if (@zammad_post_queue > 0)
      {
        if (!$zammad_lock)
        {
          #$log->debug("dequeueing a single message");
          dequeue_zammad;
        }
      }
      else
      {
        #$log->debug("stopping queue runner");
        undef $zammad_queue_watcher;
      }
    }
  );
}

sub on_connect
{
  my ($astman) = @_;
  $log->info("connection established");
}

sub on_error
{
  my ($astman, $error) = @_;
  $log->errorf("encountered on_error event: %s", $error);
}

sub on_disconnect
{
  my ($astman, $error) = @_;

  $log->errorf("encountered on_disconnect event: %s", $error);
}

sub cb_default
{
  my ($asterisk, $event) = @_;

  # QueueCallerJoin -> Anruf startet
  # QueueCallerAbandon -> Anrufer hat zu frÃ¼h aufgelegt
  # AgentConnect -> Agent hat abgenommen
  # AgentComplete -> Agent hat fertig

  if ($event->{Event} !~ /(^QueueMember|^AgentCalled$|^AgentRingNoAnswer$|^QueueCallerLeave$)/)
  {
    $log->debugf("got event: %s", $event->{Event});
    #$log->debug(np($event));
  }

  if ($event->{Event} eq "QueueCallerJoin" ||  # Asterisk >= 12
      $event->{Event} eq "Join")               # Asterisk <= 11
  {
    # EVENT: QueueCallerJoin
    # \ {
    #     AccountCode         "",
    #     CallerIDName        "Lastname, Firstname",
    #     CallerIDNum         "+49 123 456789",
    #     Channel             "SIP/hfo-00000018",
    #     ChannelState        6,
    #     ChannelStateDesc    "Up",
    #     ConnectedLineName   "<unknown>",
    #     ConnectedLineNum    "<unknown>",
    #     Context             "internal",
    #     Count               1,
    #     Event               "QueueCallerJoin",
    #     Exten               "support_queue",
    #     Language            "de",
    #     Linkedid            1545241916.41,
    #     Position            1,
    #     Priority            7,
    #     Privilege           "agent,all",
    #     Queue               "support",
    #     Uniqueid            1545241916.41
    # }
    post_zammad {
        event => "newCall",
        from => $event->{CallerIDNum},
        to => $event->{Queue},
        direction => "in",
        callId => $event->{Queue}.$event->{Uniqueid},
        "user[]" => $event->{CallerIDName},
      };
  }
  elsif ($event->{Event} eq "AgentConnect")
  {
    # EVENT: AgentConnect
    # \ {
    #     AccountCode             "",
    #     CallerIDName            "Lastname, Firstname",
    #     CallerIDNum             "+49 123 456789",
    #     Channel                 "SIP/hfo-00000018",
    #     ChannelState            6,
    #     ChannelStateDesc        "Up",
    #     ConnectedLineName       "AgentFirstname",
    #     ConnectedLineNum        "<unknown>",
    #     Context                 "internal",
    #     DestAccountCode         "",
    #     DestCallerIDName        "AgentFirstname",
    #     DestCallerIDNum         "<unknown>",
    #     DestChannel             "SIP/agent.name-00000019",
    #     DestChannelState        6,
    #     DestChannelStateDesc    "Up",
    #     DestConnectedLineName   "Lastname, Firstname",
    #     DestConnectedLineNum    "+49 123 456789",
    #     DestContext             "internal",
    #     DestExten               "support_queue",
    #     DestLanguage            "de",
    #     DestLinkedid            1545241916.41,
    #     DestPriority            1,
    #     DestUniqueid            1545241917.42,
    #     Event                   "AgentConnect",
    #     Exten                   "support_queue",
    #     HoldTime                7,
    #     Interface               "SIP/agent.name",
    #     Language                "de",
    #     Linkedid                1545241916.41,
    #     MemberName              "SIP/agent.name",
    #     Priority                7,
    #     Privilege               "agent,all",
    #     Queue                   "support",
    #     RingTime                6,
    #     Uniqueid                1545241916.41
    # }
    (my $agent = $event->{MemberName}) =~ s/^SIP\///;
    post_zammad {
        event => "answer",
        direction => "in",
        user => $agent,
        callId => $event->{Queue}.$event->{Uniqueid},
      };
  }
  elsif ($event->{Event} eq "AgentComplete")
  {
    # EVENT: AgentComplete
    # \ {
    #     AccountCode             "",
    #     CallerIDName            "Lastname, Firstname",
    #     CallerIDNum             "+49 123 456789",
    #     Channel                 "SIP/hfo-00000018",
    #     ChannelState            6,
    #     ChannelStateDesc        "Up",
    #     ConnectedLineName       "AgentFirstname",
    #     ConnectedLineNum        "<unknown>",
    #     Context                 "internal",
    #     DestAccountCode         "",
    #     DestCallerIDName        "AgentFirstname",
    #     DestCallerIDNum         "<unknown>",
    #     DestChannel             "SIP/agent.name-00000019",
    #     DestChannelState        6,
    #     DestChannelStateDesc    "Up",
    #     DestConnectedLineName   "Lastname, Firstname",
    #     DestConnectedLineNum    "+49 123 456789",
    #     DestContext             "internal",
    #     DestExten               "support_queue",
    #     DestLanguage            "de",
    #     DestLinkedid            1545241916.41,
    #     DestPriority            1,
    #     DestUniqueid            1545241917.42,
    #     Event                   "AgentComplete",
    #     Exten                   "support_queue",
    #     HoldTime                7,
    #     Interface               "SIP/agent.name",
    #     Language                "de",
    #     Linkedid                1545241916.41,
    #     MemberName              "SIP/agent.name",
    #     Priority                7,
    #     Privilege               "agent,all",
    #     Queue                   "support",
    #     Reason                  "agent",
    #     TalkTime                3,
    #     Uniqueid                1545241916.41
    # }
    post_zammad {
        event => "hangup",
        direction => "in",
        callId => $event->{Queue}.$event->{Uniqueid},
        cause => "normalClearing",
        };
  }
  elsif ($event->{Event} eq "QueueCallerAbandon")
  {
    # EVENT: QueueCallerAbandon
    # \ {
    #     AccountCode         "",
    #     CallerIDName        "Lastname, Firstname",
    #     CallerIDNum         "+49 123 456789",
    #     Channel             "SIP/hfo-00000041",
    #     ChannelState        6,
    #     ChannelStateDesc    "Up",
    #     ConnectedLineName   "<unknown>",
    #     ConnectedLineNum    "<unknown>",
    #     Context             "internal",
    #     Event               "QueueCallerAbandon",
    #     Exten               "support_queue",
    #     HoldTime            1,
    #     Language            "de",
    #     Linkedid            1545244062.103,
    #     OriginalPosition    1,
    #     Position            1,
    #     Priority            7,
    #     Privilege           "agent,all",
    #     Queue               "support",
    #     Uniqueid            1545244062.103
    # }

    # FIXME
    # A caller can give up on his own, or he can get kicked from the queue due
    # to EXITEMPTY (no agents available). The AMI event currently doesn't tell
    # us what happened, so we can't inform Zammad about this.
    # https://issues.asterisk.org/jira/browse/ASTERISK-27828
    post_zammad {
        event => "hangup",
        direction => "in",
        callId => $event->{Queue}.$event->{Uniqueid},
        cause => "cancel",
      };
  }
}

Log::Any::Adapter->set('Dispatch',
    outputs => [
      [
        'Screen',
        min_level => "debug",
        newline => 1,
        callbacks => sub
        {
          my %h = (@_);
          return sprintf("%s [%s] %s",
              POSIX::strftime("%F %T %z", localtime), $h{level}, $h{message});
        }
      ]
    ]
  );

$opt->{asterisk} = "asterisk";
$opt->{zammad} = "zammad";

GetOptions($opt,
    "asterisk=s",
    "zammad=s",
    "help"
  ) or $opt->{help} = 1;

help if $opt->{help};

my @stat;
if (@stat = stat "config.cfg")
{
  die "Need 0600 permissions on config.cfg!\n" if ($stat[2] & 07777) != 0600;
  $cfg = Config::Simple->new("config.cfg")
      or die "failed to read config: $!";
}
elsif (@stat = stat "$FindBin::Bin/config.cfg")
{
  die "Need 0600 permissions on config.cfg!\n" if ($stat[2] & 07777) != 0600;
  $cfg = Config::Simple->new("$FindBin::Bin/config.cfg")
      or die "failed to read config: $!";
}
else
{
  die "Configuration file config.cfg not found!\n";
}

die "Invalid --zammad option!\n" if $opt->{zammad} !~ /^[\w-]{1,32}$/;
die "Invalid --asterisk option!\n" if $opt->{asterisk} !~ /^[\w-]{1,32}$/;

die "Invalid zammad.url value!\n" if !$cfg->param("$opt->{zammad}.url");
die "Invalid asterisk.user value!\n" if !$cfg->param("$opt->{asterisk}.user");
die "Invalid asterisk.secret value!\n" if !$cfg->param("$opt->{asterisk}.secret");

asterisk_connect;

my $connection_watcher = AnyEvent->timer(
  interval => 5,
  cb => sub {
    #$log->debug("ping watcher");
    if (ref $astman eq "Asterisk::AMI::destroyed")
    {
      $log->info("astman is gone");
      asterisk_connect;
    }
  }
);

AnyEvent->condvar->recv;
